pipeline {
    agent any

    environment {
        registryName = "aksregistrydevops"
        registryCredential = 'aksregistrydevops'
        registryUrl = 'aksregistrydevops.azurecr.io'
        resourceGroup = 'aks-resource-group'
        versionTag = "v${env.BUILD_ID}-${new Date().format('yyyyMMdd-HHmmss').toLowerCase()}"
        K8S_NAMESPACE = 'default'
        AZURE_SUBSCRIPTION_ID = '9a668e8f-ad3f-48a1-94cb-fbcf50b35167'
        K8S_CLUSTER = 'akscluster'
        ACR_SECRET_NAME = 'acr-secret'
    }

    stages {
        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${registryName}:${versionTag}")
                }
            }
        }

        stage('Upload Image to ACR') {
            steps {
                script {
                    docker.withRegistry("https://${registryUrl}", registryCredential) {
                        dockerImage.push("${versionTag}")
                    }
                }
            }
        }

        stage('Authenticate with AKS') {
            steps {
                script {
                    withCredentials([azureServicePrincipal('azure-service-principle')]) {
                        sh '''
                        az login --service-principal --username $AZURE_CLIENT_ID --password $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
                        az aks get-credentials --resource-group ${resourceGroup} --name ${K8S_CLUSTER} --subscription ${AZURE_SUBSCRIPTION_ID}
                        '''
                    }
                }
            }
        }

        stage('Create ACR Secret') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'acr-username', variable: 'ACR_USERNAME'),
                                     string(credentialsId: 'acr-password', variable: 'ACR_PASSWORD'),
                                     string(credentialsId: 'acr-email', variable: 'ACR_EMAIL')]) {
                        sh '''
                        kubectl create secret docker-registry ${ACR_SECRET_NAME} \
                          --docker-server=${ACR_DOCKER_SERVER} \
                          --docker-username=${ACR_USERNAME} \
                          --docker-password=${ACR_PASSWORD} \
                          --docker-email=${ACR_EMAIL} || true
                        '''
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh '''
                    sed -i 's|image: .*|image: ${registryUrl}/${registryName}:${versionTag}|' deployment.yaml
                    kubectl apply -f deployment.yaml
                    kubectl apply -f service.yaml
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
